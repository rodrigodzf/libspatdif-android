/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package libspatdif;

public class sdDescriptor {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected sdDescriptor(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(sdDescriptor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        spatdiflib_wrapperJNI.delete_sdDescriptor(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public sdDescriptor(EDescriptor descriptor, SWIGTYPE_p_std__string descriptorString, boolean interpolability) {
    this(spatdiflib_wrapperJNI.new_sdDescriptor(descriptor.swigValue(), SWIGTYPE_p_std__string.getCPtr(descriptorString), interpolability), true);
  }

  public EDescriptor getDescriptor() {
    return EDescriptor.swigToEnum(spatdiflib_wrapperJNI.sdDescriptor_getDescriptor(swigCPtr, this));
  }

  public SWIGTYPE_p_std__string getDescriptorAsString() {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.sdDescriptor_getDescriptorAsString(swigCPtr, this), true);
  }

  public boolean getInterpolability() {
    return spatdiflib_wrapperJNI.sdDescriptor_getInterpolability(swigCPtr, this);
  }

}
