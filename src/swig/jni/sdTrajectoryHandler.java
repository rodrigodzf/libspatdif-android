/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package libspatdif;

public class sdTrajectoryHandler {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected sdTrajectoryHandler(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(sdTrajectoryHandler obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        spatdiflib_wrapperJNI.delete_sdTrajectoryHandler(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SWIGTYPE_p_std__mapT_std__string_sdTrajectory_p_t getTrajectoryMap() {
    return new SWIGTYPE_p_std__mapT_std__string_sdTrajectory_p_t(spatdiflib_wrapperJNI.sdTrajectoryHandler_getTrajectoryMap(swigCPtr, this), false);
  }

  public SWIGTYPE_p_sdTrajectory getTrajectory(SWIGTYPE_p_std__string name) {
    long cPtr = spatdiflib_wrapperJNI.sdTrajectoryHandler_getTrajectory(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(name));
    return (cPtr == 0) ? null : new SWIGTYPE_p_sdTrajectory(cPtr, false);
  }

  public void setTrajectory(SWIGTYPE_p_std__string name, SWIGTYPE_p_sdTrajectory trajectory) {
    spatdiflib_wrapperJNI.sdTrajectoryHandler_setTrajectory(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(name), SWIGTYPE_p_sdTrajectory.getCPtr(trajectory));
  }

  public long getNumberOfTrajectories() {
    return spatdiflib_wrapperJNI.sdTrajectoryHandler_getNumberOfTrajectories(swigCPtr, this);
  }

  public SWIGTYPE_p_std__vectorT_std__string_t getAllKeys() {
    return new SWIGTYPE_p_std__vectorT_std__string_t(spatdiflib_wrapperJNI.sdTrajectoryHandler_getAllKeys(swigCPtr, this), true);
  }

  public void removeTrajectory(SWIGTYPE_p_std__string name) {
    spatdiflib_wrapperJNI.sdTrajectoryHandler_removeTrajectory(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(name));
  }

  public void removeAllTrajectories() {
    spatdiflib_wrapperJNI.sdTrajectoryHandler_removeAllTrajectories(swigCPtr, this);
  }

  public sdTrajectoryHandler() {
    this(spatdiflib_wrapperJNI.new_sdTrajectoryHandler(), true);
  }

}
