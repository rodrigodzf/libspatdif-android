/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package libspatdif;

public class spatdiflib_wrapper {
  public static SWIGTYPE_p_std__string intsToString(SWIGTYPE_p_int it, int num) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.intsToString(SWIGTYPE_p_int.getCPtr(it), num), true);
  }

  public static SWIGTYPE_p_std__string intToString(int it) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.intToString(it), true);
  }

  public static SWIGTYPE_p_std__string floatsToString(SWIGTYPE_p_float ft, int num) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.floatsToString(SWIGTYPE_p_float.getCPtr(ft), num), true);
  }

  public static SWIGTYPE_p_std__string floatToString(float ft) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.floatToString(ft), true);
  }

  public static SWIGTYPE_p_double floatsToDoubles(SWIGTYPE_p_float floats, SWIGTYPE_p_double doubles, int num) {
    long cPtr = spatdiflib_wrapperJNI.floatsToDoubles(SWIGTYPE_p_float.getCPtr(floats), SWIGTYPE_p_double.getCPtr(doubles), num);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static SWIGTYPE_p_float doublesToFloats(SWIGTYPE_p_double doubles, SWIGTYPE_p_float floats, int num) {
    long cPtr = spatdiflib_wrapperJNI.doublesToFloats(SWIGTYPE_p_double.getCPtr(doubles), SWIGTYPE_p_float.getCPtr(floats), num);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public static SWIGTYPE_p_std__string doublesToString(SWIGTYPE_p_double db, int num) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.doublesToString(SWIGTYPE_p_double.getCPtr(db), num), true);
  }

  public static SWIGTYPE_p_std__string doubleToString(double db) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.doubleToString(db), true);
  }

  public static SWIGTYPE_p_std__string boolToString(boolean bl) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.boolToString(bl), true);
  }

  public static boolean stringToBool(SWIGTYPE_p_std__string str) {
    return spatdiflib_wrapperJNI.stringToBool(SWIGTYPE_p_std__string.getCPtr(str));
  }

  public static SWIGTYPE_p_double stringToDoubles(SWIGTYPE_p_std__string str, SWIGTYPE_p_double db, int num) {
    long cPtr = spatdiflib_wrapperJNI.stringToDoubles(SWIGTYPE_p_std__string.getCPtr(str), SWIGTYPE_p_double.getCPtr(db), num);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static double stringToDouble(SWIGTYPE_p_std__string str) {
    return spatdiflib_wrapperJNI.stringToDouble(SWIGTYPE_p_std__string.getCPtr(str));
  }

  public static SWIGTYPE_p_int stringToInts(SWIGTYPE_p_std__string str, SWIGTYPE_p_int it, int num) {
    long cPtr = spatdiflib_wrapperJNI.stringToInts(SWIGTYPE_p_std__string.getCPtr(str), SWIGTYPE_p_int.getCPtr(it), num);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static int stringToInt(SWIGTYPE_p_std__string str) {
    return spatdiflib_wrapperJNI.stringToInt(SWIGTYPE_p_std__string.getCPtr(str));
  }

  public static SWIGTYPE_p_std__string extensionToString(EExtension extension) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.extensionToString(extension.swigValue()), true);
  }

  public static EExtension stringToExtension(SWIGTYPE_p_std__string extensionStr) {
    return EExtension.swigToEnum(spatdiflib_wrapperJNI.stringToExtension(SWIGTYPE_p_std__string.getCPtr(extensionStr)));
  }

  public static EExtension getRelevantExtension(EDescriptor descriptor) {
    return EExtension.swigToEnum(spatdiflib_wrapperJNI.getRelevantExtension(descriptor.swigValue()));
  }

  public static SWIGTYPE_p_std__string getDescriptorAsString(EDescriptor descriptor, sdDescriptor descriptors, int numberOfDescriptors) {
    return new SWIGTYPE_p_std__string(spatdiflib_wrapperJNI.getDescriptorAsString(descriptor.swigValue(), sdDescriptor.getCPtr(descriptors), descriptors, numberOfDescriptors), true);
  }

  public static EDescriptor getDescriptorAsEnum(SWIGTYPE_p_std__string descriptor, sdDescriptor descriptors, int numberOfDescriptors) {
    return EDescriptor.swigToEnum(spatdiflib_wrapperJNI.getDescriptorAsEnum(SWIGTYPE_p_std__string.getCPtr(descriptor), sdDescriptor.getCPtr(descriptors), descriptors, numberOfDescriptors));
  }

}
